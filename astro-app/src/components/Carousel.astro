---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

interface Props {
  images: Array<{
    src: ImageMetadata;
    alt: string;
    title: string;
  }>;
}

const { images } = Astro.props;
---

<div
  class="relative w-full mx-auto"
  role="region"
  aria-label="Carrusel de productos"
  aria-roledescription="carousel"
>
  <!-- Live region for screen readers -->
  <div
    aria-live="polite"
    aria-atomic="true"
    class="sr-only"
    id="carousel-status"
  >
    Imagen 1 de {images.length}
  </div>

  <!-- Carousel Container -->
  <div
    class="relative overflow-hidden rounded-lg shadow-lg aspect-video bg-zinc-100"
  >
    {
      images.map((image, index) => (
        <div
          class={`carousel-item absolute w-full h-full transition-opacity duration-500 ${index === 0 ? "opacity-100" : "opacity-0"}`}
          data-index={index}
        >
          <Image
            src={image.src}
            alt={image.alt}
            title={image.title}
            class="w-full h-full object-cover"
            loading={index === 0 ? "eager" : "lazy"}
            width={1280}
            height={720}
            quality={90}
          />
        </div>
      ))
    }
  </div>

  <!-- Pause/Play Button -->
  <button
    class="carousel-pause absolute top-2 right-2 bg-black/50 hover:bg-black/70 text-white p-2 rounded-full transition-colors focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-black/50"
    aria-label="Pausar carrusel automático"
  >
    <svg
      class="w-5 h-5"
      fill="currentColor"
      viewBox="0 0 24 24"
      aria-hidden="true"
    >
      <path d="M6 4h4v16H6V4zm8 0h4v16h-4V4z"></path>
    </svg>
  </button>

  <!-- Previous Button -->
  <button
    class="carousel-prev absolute left-2 top-1/2 -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white p-3 rounded-full transition-colors focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-black/50"
    aria-label="Imagen anterior"
  >
    <svg
      class="w-6 h-6"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
      aria-hidden="true"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M15 19l-7-7 7-7"></path>
    </svg>
  </button>

  <!-- Next Button -->
  <button
    class="carousel-next absolute right-2 top-1/2 -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white p-3 rounded-full transition-colors focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-black/50"
    aria-label="Imagen siguiente"
  >
    <svg
      class="w-6 h-6"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
      aria-hidden="true"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M9 5l7 7-7 7"></path>
    </svg>
  </button>

  <!-- Indicators -->
  <div
    class="absolute bottom-4 left-1/2 -translate-x-1/2 flex space-x-2"
    role="group"
    aria-label="Indicadores de diapositivas"
  >
    {
      images.map((_, index) => (
        <button
          class={`carousel-indicator w-3 h-3 rounded-full transition-colors focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-black/50 ${index === 0 ? "bg-white" : "bg-white/50"}`}
          data-index={index}
          aria-label={`Ir a imagen ${index + 1}`}
          aria-current={index === 0 ? "true" : "false"}
        />
      ))
    }
  </div>
</div>

<script>
  document
    .querySelectorAll("[role='region'][aria-label='Carrusel de productos']")
    .forEach((carousel) => {
      const items = carousel.querySelectorAll(".carousel-item");
      const indicators = carousel.querySelectorAll(".carousel-indicator");
      const prevBtn = carousel.querySelector(".carousel-prev");
      const nextBtn = carousel.querySelector(".carousel-next");
      const pauseBtn = carousel.querySelector(".carousel-pause");
      const statusEl = carousel.querySelector("#carousel-status");

      let currentIndex = 0;
      let isPlaying = true;
      let autoPlayInterval: number | null = null;

      function updateStatus() {
        if (statusEl) {
          statusEl.textContent = `Imagen ${currentIndex + 1} de ${items.length}`;
        }
      }

      function showSlide(index: number) {
        items.forEach((item, i) => {
          if (i === index) {
            item.classList.remove("opacity-0");
            item.classList.add("opacity-100");
          } else {
            item.classList.remove("opacity-100");
            item.classList.add("opacity-0");
          }
        });

        indicators.forEach((indicator, i) => {
          if (i === index) {
            indicator.classList.remove("bg-white/50");
            indicator.classList.add("bg-white");
            indicator.setAttribute("aria-current", "true");
          } else {
            indicator.classList.remove("bg-white");
            indicator.classList.add("bg-white/50");
            indicator.setAttribute("aria-current", "false");
          }
        });

        updateStatus();
      }

      function nextSlide() {
        currentIndex = (currentIndex + 1) % items.length;
        showSlide(currentIndex);
      }

      function prevSlide() {
        currentIndex = (currentIndex - 1 + items.length) % items.length;
        showSlide(currentIndex);
      }

      function startAutoPlay() {
        if (autoPlayInterval) clearInterval(autoPlayInterval);
        autoPlayInterval = setInterval(nextSlide, 5000) as unknown as number;
        isPlaying = true;

        if (pauseBtn) {
          pauseBtn.setAttribute("aria-label", "Pausar carrusel automático");
          pauseBtn.innerHTML =
            '<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M6 4h4v16H6V4zm8 0h4v16h-4V4z"></path></svg>';
        }
      }

      function stopAutoPlay() {
        if (autoPlayInterval) {
          clearInterval(autoPlayInterval);
          autoPlayInterval = null;
        }
        isPlaying = false;

        if (pauseBtn) {
          pauseBtn.setAttribute("aria-label", "Reanudar carrusel automático");
          pauseBtn.innerHTML =
            '<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8 5v14l11-7z"></path></svg>';
        }
      }

      function toggleAutoPlay() {
        if (isPlaying) {
          stopAutoPlay();
        } else {
          startAutoPlay();
        }
      }

      // Event listeners
      nextBtn?.addEventListener("click", () => {
        nextSlide();
        stopAutoPlay();
      });

      prevBtn?.addEventListener("click", () => {
        prevSlide();
        stopAutoPlay();
      });

      pauseBtn?.addEventListener("click", toggleAutoPlay);

      indicators.forEach((indicator, index) => {
        indicator.addEventListener("click", () => {
          currentIndex = index;
          showSlide(currentIndex);
          stopAutoPlay();
        });
      });

      // Keyboard navigation
      carousel.addEventListener("keydown", (e) => {
        if (e.key === "ArrowLeft") {
          e.preventDefault();
          prevSlide();
          stopAutoPlay();
        } else if (e.key === "ArrowRight") {
          e.preventDefault();
          nextSlide();
          stopAutoPlay();
        } else if (e.key === " " || e.key === "Spacebar") {
          e.preventDefault();
          toggleAutoPlay();
        }
      });

      // Pause on hover (accessibility best practice)
      carousel.addEventListener("mouseenter", () => {
        if (isPlaying) stopAutoPlay();
      });

      carousel.addEventListener("mouseleave", () => {
        if (!isPlaying) startAutoPlay();
      });

      // Start auto-play
      startAutoPlay();
    });
</script>
